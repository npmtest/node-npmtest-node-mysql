{"/home/travis/build/npmtest/node-npmtest-node-mysql/test.js":"/* istanbul instrument in package npmtest_node_mysql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mysql/lib.npmtest_node_mysql.js":"/* istanbul instrument in package npmtest_node_mysql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_mysql = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_mysql = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mysql/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-mysql && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_mysql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_mysql\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_mysql.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_mysql.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_mysql.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_mysql.__dirname + '/lib.npmtest_node_mysql.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mysql/node_modules/node-mysql/lib/node-mysql.js":"\nvar Class = require('better-js-class');\nvar $U = require('underscore');\nvar _DB = require('./db.js');\nvar $M = require('./model.js');\n\nvar DB = Class(_DB, {\n    _init: function(cfg) {\n        this.parent._init.call(this, cfg);\n        this._models = {};\n    },\n\n    add: function(cfg) {\n        var me = this;\n\n        var model = {};\n\n        var RowTemplate = function(model) {\n            var closedRowClass = Class($M.Row, {\n                _init: function(data) {\n                    this.parent._init.call(this, data, {\n                        table: model.Table\n                    });\n                }\n            });\n            return Class(closedRowClass, cfg.Row || {});\n        };\n\n        var Row = RowTemplate(model);\n\n        $U.extend(model, {\n            Row: Row,\n            _RowTemplate: RowTemplate\n        });\n\n\n        var TableTemplate = function(model) {\n            var closedTableClass = Class($M.Table, {\n                _init: function() {\n                    this.parent._init.call(this, {\n                        db: me,\n                        name: cfg.name,\n                        rowClass: model.Row,\n                        idFieldName: cfg.idFieldName || 'id',\n                        versionFieldName: cfg.versionFieldName || 'version',\n                        createdFieldName: cfg.createdFieldName || 'date_created',\n                        updatedFieldName: cfg.updatedFieldName || 'last_updated'\n                    });\n                }\n            });\n\n            return Class(closedTableClass, cfg.Table || {});\n        };\n\n        var TableClass = TableTemplate(model);\n        var Table = new TableClass();\n\n        $U.extend(model, {\n            Table: Table,\n            _TableTemplate: TableTemplate\n        });\n\n        this._models[cfg.name] = model;\n\n        return Table;\n    },\n\n    clone: function() {\n        var tempClass = function() {\n            this._models = $U.clone(this._models);\n        };\n\n        tempClass.prototype = this;\n        return new tempClass();\n    },\n\n    extend: function(cfg) {\n        var _model = this.get(cfg.name);\n\n        if (!_model) {\n            throw new Error('node-mysql-runtime-error: db.extend can not be used on empty model.');\n        }\n\n        var model = {};\n\n        var _RowTemplate = _model._RowTemplate;\n\n        var RowTemplate = function(model) {\n            var superClass = _RowTemplate(model);\n            return Class(superClass, cfg.Row || {});\n        };\n\n        var Row = RowTemplate(model);\n\n        $U.extend(model, {\n            Row: Row,\n            _RowTemplate: RowTemplate\n        });\n\n        var _TableTemplate = _model._TableTemplate;\n\n        var TableTemplate = function(model) {\n            var superClass = _TableTemplate(model);\n            return Class(superClass, cfg.Table || {});\n        };\n\n        var TableClass = TableTemplate(model);\n\n        var Table = new TableClass();\n\n        $U.extend(model, {\n            Table: Table,\n            _TableTemplate: TableTemplate\n        });\n\n        this._models[cfg.name] = model;\n\n        return Table;\n    },\n\n    get: function(name) {\n        return this._models[name];\n    }\n});\n\nDB.format = _DB.format;\n\nmodule.exports = {\n    DB: DB,\n    Row: $M.Row,\n    Table: $M.Table,\n    OPTIMISTIC_LOCK_EXCEPTION: $M.OPTIMISTIC_LOCK_EXCEPTION\n}\n\n\n","/home/travis/build/npmtest/node-npmtest-node-mysql/node_modules/node-mysql/lib/db.js":"\nvar Class = require('better-js-class');\n\nvar cps = require('cps');\n\nvar mysql = require('mysql');\n\nvar $U = require('underscore');\n\nvar getValue = function(o) {\n    for (var k in o) {\n        return o[k];\n    }\n};\n\n\nmodule.exports = function() {\n    var DB = Class({\n        _init: function(cfg) {\n            var transactionOverride = cfg['useTransaction'];\n            delete cfg['useTransaction'];\n\n            var cursorOverride = cfg['useCursor'];\n            delete cfg['useCursor'];\n\n            this._cfg = cfg;\n            // console.log(this._cfg);\n            this._pool = mysql.createPool(this._cfg);\n\n            if (transactionOverride) {\n                this._transactionCfg = this._buildCfg(cfg, transactionOverride);\n                // console.log('transactionCfg:', this._transactionCfg);\n                this._transactionPool = mysql.createPool(this._transactionCfg);\n            }\n\n            if (cursorOverride) {\n                this._cursorCfg = this._buildCfg(cfg, cursorOverride);\n                // console.log('cursorCfg:', this._cursorCfg);\n                this._cursorPool = mysql.createPool(this._cursorCfg);\n            }\n\n            this._schema = {};\n            this._prepared = false;\n        },\n\n        _buildCfg: function(cfg, override) {\n            var res = {};\n\n            for (var k in cfg) {\n                res[k] = cfg[k];\n            }\n\n            $U.extend(res, override);\n            return res;\n        },\n\n        connect: function(proc, cb) {\n            var me = this;\n\n            cps.seq([\n                function(_, cb) {\n                    me._prepare(cb);\n                },\n                function(_, cb) {\n                    me._connect(me._pool, proc, cb);\n                }\n            ], cb);\n        },\n\n        _prepare: function(cb) {\n            if (this._prepared) {\n                return cb();\n            }\n\n            // console.log('call prepare');\n            var me = this;\n            var conn;\n\n            this._connect(me._pool, function(conn, cb) {\n                cps.seq([\n                    function(res, cb) {\n                        conn.query('show tables', cb);\n                    },\n                    function(tables, cb) {\n                        cps.peach(tables, function(table, cb) {\n                            var tableName = getValue(table);\n                            cps.seq([\n                                function(_, cb) {\n                                    conn.query('desc ' + tableName, cb);\n                                },\n                                function(columns, cb) {\n                                    me._schema[tableName] = $U.map(columns, function(column) {\n                                        return column['Field'];\n                                    });\n                                    me._prepared = true;\n                                    cb();\n                                }\n                            ], cb);\n                        }, cb);\n                    }\n                ], cb);\n            }, cb);\n        },\n\n        _connect: function(pool, proc, cb) {\n            var me = this;\n            var conn;\n            cps.seq([\n                function(_, cb) {\n                    pool.getConnection(cb);\n                },\n                function(res, cb) {\n                    conn = res;\n                    cps.rescue({\n                        'try': function(cb) {\n                            proc(conn, cb);\n                        },\n                        'finally': function(cb) {\n                            // console.log('release connection');\n                            conn.release();\n                            cb();\n                        }\n                    }, cb);\n                }\n            ], cb);\n        },\n\n        transaction: function(conn, proc, cb) {\n            var me = this;\n\n            if (!me._transactionPool) {\n                cb(new Error('transaction-not-setup-error'));\n                return;\n            }\n\n            var txnConn;\n            var commitRes;\n\n            if (me._isTxnConnection(conn)) {\n                proc(conn, cb);\n            } else {\n                cps.seq([\n                    function(_, cb) {\n                        me._prepare(cb);\n                    },\n                    /*\n                    function(_, cb) {\n                        me._getTxnConnection(cb);\n                    },\n                    */\n                    function(_, cb) {\n                        me._connect(me._transactionPool, function(conn, cb) {\n                            me._enterTransaction(conn);\n                            txnConn = conn;\n                            cps.rescue({\n                                'try': function(cb) {\n                                    cps.seq([\n                                        function(_, cb) {\n                                            // console.log('start transaction');\n                                            txnConn.query('START TRANSACTION', cb);\n                                        },\n                                        function(_, cb) {\n                                            cps.rescue({\n                                                'try': function(cb) {\n                                                    cps.seq([\n                                                        function(_, cb) {\n                                                            proc(txnConn, cb);\n                                                        },\n                                                        function(res, cb) {\n                                                            commitRes = res;\n                                                            // console.log('committing');\n                                                            txnConn.query('COMMIT', cb);\n                                                        },\n                                                        function(_, cb) {\n                                                            // console.log('committed');\n                                                            cb(null, commitRes);\n                                                        }\n                                                    ], cb);\n                                                },\n                                                'catch': function(err, cb) {\n                                                    cps.seq([\n                                                        function(_, cb) {\n                                                            // console.log('rolling back ...');\n                                                            txnConn.query('ROLLBACK', cb);\n                                                        },\n                                                        function(_, cb) {\n                                                            // console.log('rolled back');\n                                                            throw(err);\n                                                        }\n                                                    ], cb);\n                                                }\n                                            }, cb);\n                                        }\n                                    ], cb);\n                                },\n                                'finally': function(cb) {\n                                    // console.log('txn connection release');\n                                    // txnConn.release();\n                                    me._leaveTransaction(txnConn);\n                                    cb();\n                                }\n                            }, cb);\n                        }, cb);\n                    }\n                ], cb);\n            }\n        },\n\n        cursor: function(q, proc, _cb) {\n            var me = this;\n\n            if (!me._cursorPool) {\n                _cb(new Error('cursor-not-setup-error'));\n                return;\n            }\n\n            var returned = false;\n\n            var cb = function(err, res) {\n                if (!returned) {\n                    returned = true;\n                    _cb(err, res);\n                } else {\n                }\n            }\n\n            var breakCB =  cb;\n            this._cursorPool.getConnection(function(err, conn) {\n                var query = conn.query(q);\n                query\n                    .on('error', function(err) {\n                        // console.log('cursor error');\n                        conn.release();\n                        cb(new Error(err));\n                    })\n                    .on('result', function(res) {\n                        // console.log('cursor result');\n                        conn.pause();\n\n                        var cb = function(err, res) {\n                            if (err) {\n                                conn.release();\n                                breakCB(err);\n                            } else {\n                                conn.resume();\n                            }\n                        };\n\n                        cps.seq([\n                            function(_, cb) {\n                                // console.log('call row processor');\n                                proc(res, cb);\n                            }\n                        ], cb);\n                    })\n                    .on('end', function() {\n                        // console.log('cursor end');\n                        conn.release();\n                        cb();\n                    })\n                ;\n            });\n        },\n\n        _isTxnConnection: function(conn) {\n            return conn != null && conn.__transaction__;\n        },\n\n        _enterTransaction: function(conn) {\n            conn.__transaction__ = true;\n        },\n\n        _leaveTransaction: function(conn) {\n            conn.__transaction__ = false;\n        },\n\n        end: function() {\n            this._pool.end();\n            if (this._transactionPool) {\n                this._transactionPool.end();\n            }\n            if (this._cursorPool) {\n                this._cursorPool.end();\n            }\n        },\n\n        getConnection: function(cb) {\n            var me = this;\n\n            cps.seq([\n                function(_, cb) {\n                    me._prepare(cb);\n                },\n                function(_, cb) {\n                    me._pool.getConnection(cb);\n                }\n            ], cb);\n        }\n    });\n\n    $U.extend(DB, {\n        format: function(str, bindings) {\n            var l = str.split('?')\n\n            if (l.length - 1 != bindings.length) {\n                throw new Error('sql string format error');\n            }\n\n            var res = [];\n\n            for (var i = 0; i < bindings.length; i++) {\n                res.push(l[i]);\n                res.push(mysql.escape(bindings[i]));\n            }\n\n            res.push(l[l.length - 1]);\n\n            return res.join(' ');\n        }\n    });\n\n    return DB;\n}();\n","/home/travis/build/npmtest/node-npmtest-node-mysql/node_modules/node-mysql/lib/model.js":"\nvar Class = require('better-js-class');\nvar cps = require('cps');\nvar $U = require('underscore');\n\nvar DB = require('./db.js');\n\nmodule.exports = function() {\n    var Model = {\n        OPTIMISTIC_LOCK_EXCEPTION: 'optimistic_lock_exception'\n    };\n\n    var Row  = Class({\n        _init: function(data, cfg) {\n            this._table = cfg.table;\n            this._data = data;\n        },\n\n        getId: function() {\n            return this._data[this._table.getIdFieldName()];\n        },\n\n        _getVersion: function() {\n            return this._data[this._table.getVersionFieldName()];\n        },\n\n        _nextVersion: function() {\n            return this._data[this._table.getVersionFieldName()] + 1;\n        },\n\n        _updateLocalData: function(dto) {\n            for (var k in dto) {\n                var v = dto[k];\n                this._data[k] = v;\n            }\n        },\n\n        _refineDtoForUpdate: function(dto) {\n\n            var res = {};\n\n            for (var k in dto) {\n                if (this._table._hasUpdatableField(k)) {\n                    res[k] = dto[k];\n                }\n            }\n\n            var d = new Date();\n            res[this._table.getUpdatedFieldName()] = d;\n\n            return res;\n        },\n\n        updateWithoutOptimisticLock: function(conn, dto, cb) {\n            this._update(conn, dto, null, cb);\n        },\n\n        update: function(conn, dto, cb) {\n            var me = this;\n\n            dto['version'] = this._nextVersion();\n            var cond = DB.format('version = ?', [this._getVersion()]);\n\n            cps.seq([\n                function(_, cb) {\n                    me._update(conn, dto, cond, cb);\n                },\n                function(res, cb) {\n                    if (res.changedRows === 0) {\n                        throw new Error(Model.OPTIMISTIC_LOCK_EXCEPTION);\n                    } else {\n                        cb(null, res);\n                    }\n                }\n            ], cb);\n        },\n\n        _update: function(conn, dto, conditions, cb) {\n            var me = this;\n\n            // dto[this._table.getUpdatedFieldName()] = new Date();\n            dto = this._refineDtoForUpdate(dto);\n\n            var l = [\n                ' update ', this._table.getName(), ' set '\n            ];\n\n            var first = true;\n            for (var k in dto) {\n                var v = dto[k];\n                if (first) {\n                    first = false;\n                } else {\n                    l.push(', ');\n                }\n                l.push(\n                    ' ', k, ' = ', conn.escape(v)\n                );\n            }\n\n            l.push(\n                ' where ', this._table.getIdFieldName(), ' = ', this.getId()\n            );\n\n            if (conditions) {\n                l.push(\n                    ' and ', conditions\n                );\n            }\n\n            l.push(' ; ');\n\n            var q = l.join('');\n\n            // console.log(q);\n\n            cps.seq([\n                function(_, cb) {\n                    conn.query(q, cb);\n                },\n                function(res, cb) {\n                    me._updateLocalData(dto);\n                    cb(null, res);\n                }\n            ], cb);\n        },\n\n        get: function(fieldName) {\n            return this._data[fieldName]\n        },\n\n        _load: function(conn, name, cb) {\n            var cfg = this._table._lookupLinksToMap(name);\n            if (cfg) {\n                return this.linksTo(conn, name, cb);\n            }\n\n            var cfg = this._table._lookupLinkedByMap(name);\n            if (cfg) {\n                return this.linkedBy(conn, name, cb);\n            }\n\n            var cfg = this._table._lookupRelatesToMap(name);\n            if (cfg) {\n                return this.relatesTo(conn, name, cb);\n            }\n\n            throw new Error('no linksTo or linkedBy or relatesTo: ' + name + ' defined on: ' + this._table.getName());\n        },\n\n        load: function(conn, name, cb) {\n            var value = this.get(name);\n            if (value) {\n                cb(null, value);\n            } else {\n                this._load(conn, name, cb);\n            }\n        },\n\n        linksTo: function(conn, name, cb) {\n            var me = this;\n\n            var cfg = this._table._lookupLinksToMap(name);\n\n            if (cfg) {\n                var otherTable = this._table._db.get(cfg.table).Table;\n                return cps.seq([\n                    function(_, cb) {\n                        otherTable.findById(conn, me.get(cfg.key), cb);\n                    },\n                    function(res, cb) {\n                        me._data[cfg.name] = res;\n                        cb(null, res);\n                    }\n                ], cb);\n            } else {\n                throw new Error('no linksTo: ' + name + ' defined on: ' + this._table.getName());\n            }\n        },\n\n        linkedBy: function(conn, name, cb) {\n            var me = this;\n\n            var cfg = this._table._lookupLinkedByMap(name);\n\n            if (cfg) {\n                var otherTable = this._table._db.get(cfg.table).Table;\n                return cps.seq([\n                    function(_, cb) {\n                        otherTable.find(conn, otherTable.baseQuery('where ' + cfg.key + ' = ?', [me.getId()]), cb);\n                    },\n                    function(res, cb) {\n                        me._data[cfg.name] = res;\n                        cb(null, me._data[cfg.name]);\n                    }\n                ], cb);\n            } else {\n                throw new Error('no linkedBy: ' + name + ' defined on: ' + this._table.getName());\n            }\n        },\n\n        relatesTo: function(conn, name, cb) {\n            var me = this;\n\n            var cfg = this._table._lookupRelatesToMap(name);\n            if (cfg) {\n                var otherTable = this._table._db.get(cfg.table).Table;\n                var throughTable = this._table._db.get(cfg.through).Table;\n\n                return cps.seq([\n                    function(_, cb) {\n                        var _q = 'select t.* from ' +\n                                otherTable.getName()  + ' t, ' +\n                                throughTable.getName() + ' r where ' +\n                                'r.' + cfg['leftKey'] + ' = ? and ' +\n                                'r.' + cfg['rightKey'] + ' = t.' + otherTable.getIdFieldName()\n                            ;\n                        var q = DB.format(_q, [me.getId()]);\n                        otherTable.find(conn, q, cb);\n                    },\n                    function(res, cb) {\n                        me._data[cfg.name] = res;\n                        cb(null, me._data[cfg.name]);\n                    }\n                ], cb);\n            } else {\n                throw new Error('no relatesTo: ' + name + ' defined on: ' + this._table.getName());\n            }\n        }\n    });\n\n    var Table = Class({\n        _init: function(cfg) {\n            this._name = cfg.name;\n            this._idFieldName = cfg.idFieldName || 'id';\n            this._versionFieldName = cfg.versionFieldName || 'version';\n            this._createdFieldName = cfg.createdFieldName || 'date_created';\n            this._updatedFieldName = cfg.updatedFieldName || 'last_updated';\n\n            this._rowClass = cfg['rowClass'];\n            // this._schema = cfg['schema'];\n            this._db = cfg['db'];\n\n            this._linksToMap = {};\n            this._linkedByMap = {};\n            this._relatesToMap = {};\n        },\n\n        getName: function() {\n            return this._name;\n        },\n\n        getIdFieldName: function() {\n            return this._idFieldName;\n        },\n\n        getVersionFieldName: function() {\n            return this._versionFieldName;\n        },\n\n        getCreatedFieldName: function() {\n            return this._createdFieldName;\n        },\n\n        getUpdatedFieldName: function() {\n            return this._updatedFieldName;\n        },\n\n        _hasUpdatableField: function(field) {\n            if (field == this.getIdFieldName()) {\n                return false;\n            }\n            if (field == this.getCreatedFieldName()) {\n                return false;\n            }\n            var schema = this._db._schema[this.getName()];\n            return $U.contains(schema, field);\n        },\n\n        _refineDto: function(dto, autoId) {\n            autoId = (autoId === undefined)? true: autoId;\n            var res = {};\n\n            var schema = this._db._schema[this.getName()];\n            $U.each(schema, function(field) {\n                res[field] = dto[field];\n            });\n\n            if (autoId) {\n                delete res[this.getIdFieldName()];\n            }\n\n            return res;\n        },\n\n        _refineDtoForCreate: function(dto) {\n            var res = this._refineDto(dto);\n\n            var d = new Date();\n            res[this.getCreatedFieldName()] = d;\n            res[this.getUpdatedFieldName()] = d;\n            res[this.getVersionFieldName()] = 0;\n\n            return res;\n        },\n\n        create: function(conn, dto, cb) {\n            dto = this._refineDtoForCreate(dto);\n            this._create(conn, dto, cb);\n        },\n\n        _create: function(conn, dto, cb) {\n            var me = this;\n\n            var l = [\n                ' insert into ' + this.getName() + ' set '\n            ];\n\n            var first = true;\n\n            $U.each(dto, function(v, k) {\n                if (first) {\n                    first = false;\n                } else {\n                    l.push(', ');\n                }\n                l.push(\n                    ' ', k, ' = ', conn.escape(v)\n                );\n            });\n\n            l.push(' ; ');\n\n            var q = l.join('');\n\n            // console.log(q);\n\n            cps.seq([\n                function(_, cb) {\n                    conn.query(q, cb);\n                },\n                function(res, cb) {\n                    dto[me._idFieldName] = res.insertId;\n                    cb(null, new me._rowClass(dto));\n                }\n            ], cb);\n        },\n\n        clone: function(conn, dto, cb) {\n            dto = this._refineDto(dto, false);\n            this._create(conn, dto, cb);\n        },\n\n        baseQuery: function(str, bindings) {\n            var q = ' select * from ' + this.getName() + ' ';\n            var further;\n\n            if (str != null) {\n                if (bindings == null) {\n                    further = str;\n                } else {\n                    further = DB.format(str, bindings);\n                }\n            }\n\n            if (further != null) {\n                q += further;\n            }\n            return q;\n        },\n\n        findById: function(conn, id, cb) {\n            var me = this;\n\n            cps.seq([\n                function(_, cb) {\n                    me.find(conn, me.baseQuery('where ' + me.getIdFieldName() + ' = ? ', [id]), cb);\n                },\n                function(res) {\n                    cb(null, res[0])\n                }\n            ], cb);\n        },\n\n        lockById: function(conn, id, cb) {\n            var me = this;\n\n            cps.seq([\n                function(_, cb) {\n                    me.find(conn, me.baseQuery('where ' + me.getIdFieldName() + ' = ? for update', [id]), cb);\n                },\n                function(res) {\n                    cb(null, res[0])\n                }\n            ], cb);\n        },\n\n        findAll: function(conn, cb) {\n            this.find(conn, this.baseQuery(), cb);\n        },\n\n        find: function(conn, q, cb) {\n            var me = this;\n\n            cps.seq([\n                function(_, cb) {\n                    conn.query(q, cb);\n                },\n                function(res, cb) {\n                    cb(null, $U.map(res, function(o) {\n                        return new me._rowClass(o);\n                    }));\n                }\n            ], cb);\n        },\n\n        linksTo: function(cfg) {\n            this._linksToMap[cfg.name] = {\n                table: cfg.table,\n                key: cfg.key\n            };\n            return this;\n        },\n\n        linkedBy: function(cfg) {\n            this._linkedByMap[cfg.name] = {\n                table: cfg.table,\n                key: cfg.key\n            };\n            return this;\n        },\n\n        relatesTo: function(cfg) {\n            this._relatesToMap[cfg.name] = {\n                table: cfg.table,\n                through: cfg.through,\n                leftKey: cfg.leftKey,\n                rightKey: cfg.rightKey\n            };\n            return this;\n        },\n\n        _lookupLinksToMap: function(name) {\n            var cfg = this._linksToMap[name];\n            if (cfg) {\n                cfg.name = name;\n            }\n            return cfg;\n        },\n\n        _lookupLinkedByMap: function(name) {\n            var cfg = this._linkedByMap[name];\n            if (cfg) {\n                cfg.name = name;\n            }\n            return cfg;\n        },\n\n        _lookupRelatesToMap: function(name) {\n            var cfg = this._relatesToMap[name];\n            if (cfg) {\n                cfg.name = name;\n            }\n            return cfg;\n        },\n\n        findFirst: function(conn, q, cb) {\n            var me = this;\n\n            cps.seq([\n                function(_, cb) {\n                    me.find(conn, q, cb);\n                },\n                function(res, cb) {\n                    cb(null, res[0]);\n                }\n            ], cb);\n        }\n    });\n\n    $U.extend(Model, {\n        Row: Row,\n        Table: Table\n    });\n\n    return Model;\n}();\n"}